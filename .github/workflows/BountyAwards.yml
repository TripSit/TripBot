name: Award XP for Merged Bounty PRs

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  award-bounty:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - name: Check if PR is a revert
      id: check-revert
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if echo "$PR_TITLE" | grep -i "revert" > /dev/null; then
          echo "is_revert=true" >> $GITHUB_OUTPUT
          echo "Detected revert PR: $PR_TITLE"
        else
          echo "is_revert=false" >> $GITHUB_OUTPUT
        fi

    - name: Get linked issues
      if: steps.check-revert.outputs.is_revert != 'true'
      id: get-issues
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const prBody = context.payload.pull_request.body || '';
          const prTitle = context.payload.pull_request.title || '';
          
          console.log(`Analyzing PR #${prNumber} for linked issues`);
          console.log('PR Title:', prTitle);
          console.log('PR Body:', prBody);
          
          const linkedIssues = new Set();
          
          // Method 1: Parse PR body and title for issue references
          const issuePattern = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s*:?\s*#(\d+)/gi;
          const mentionPattern = /#(\d+)/g;
          
          // Look for closing keywords + issue numbers
          const closingMatches = [...(prTitle + ' ' + prBody).matchAll(issuePattern)];
          for (const match of closingMatches) {
            const issueNumber = parseInt(match[1]);
            console.log(`Found closing reference to issue #${issueNumber}`);
            linkedIssues.add(issueNumber);
          }
          
          // If no closing references found, look for any issue mentions
          if (linkedIssues.size === 0) {
            const mentions = [...(prTitle + ' ' + prBody).matchAll(mentionPattern)];
            for (const match of mentions) {
              const issueNumber = parseInt(match[1]);
              console.log(`Found mention of issue #${issueNumber}`);
              linkedIssues.add(issueNumber);
            }
          }
          
          // Method 2: Also try timeline API (backup)
          try {
            const { data: events } = await github.rest.issues.listEventsForTimeline({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            console.log(`Found ${events.length} timeline events`);
            
            for (const event of events) {
              if (event.event === 'connected' && event.source?.issue) {
                console.log(`Timeline: Found connected issue #${event.source.issue.number}`);
                linkedIssues.add(event.source.issue.number);
              }
              if (event.event === 'cross-referenced' && event.source?.issue) {
                console.log(`Timeline: Found cross-referenced issue #${event.source.issue.number}`);
                linkedIssues.add(event.source.issue.number);
              }
            }
          } catch (error) {
            console.log('Timeline API failed, using text parsing only');
          }
          
          const issueNumbers = Array.from(linkedIssues);
          console.log('Final linked issues found:', issueNumbers);
          
          return issueNumbers;

    - name: Process bounty issues
      if: steps.check-revert.outputs.is_revert != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumbers = ${{ steps.get-issues.outputs.result }};
          const githubUsername = context.payload.pull_request.user.login;
          
          console.log(`Processing ${issueNumbers.length} potential bounty issues`);
          
          for (const issueNumber of issueNumbers) {
            try {
              // Get issue details
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              console.log(`Issue #${issueNumber} exists and is titled: "${issue.title}"`);
              
              // Check for bounty tags
              const bountyTag = issue.labels.find(label => 
                label.name.toLowerCase().startsWith('bounty:')
              );
              
              if (bountyTag) {
                // Extract bounty amount from tag (e.g., "bounty: 100" -> 100)
                const bountyMatch = bountyTag.name.match(/bounty:\s*(\d+)/i);
                if (bountyMatch) {
                  const bountyAmount = parseInt(bountyMatch[1]);
                  
                  console.log(`Awarding ${bountyAmount} XP to ${githubUsername} for issue #${issueNumber}`);
                  
                  // Call TripBot API
                  const response = await fetch('${{ secrets.TRIPBOT_API_URL }}/bounty/award-xp', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ${{ secrets.TRIPBOT_API_TOKEN }}'
                    },
                    body: JSON.stringify({
                      'github_username': githubUsername,
                      'bounty': bountyAmount
                    })
                  });
                  
                  if (response.ok) {
                    console.log(`Successfully awarded XP for issue #${issueNumber}`);
                  } else {
                    console.error(`Failed to award XP: ${response.status} ${response.statusText}`);
                  }
                } else {
                  console.log(`Issue #${issueNumber} has bounty tag "${bountyTag.name}" but couldn't parse amount`);
                }
              } else {
                console.log(`Issue #${issueNumber} has no bounty tag - skipping`);
              }
            } catch (error) {
              if (error.status === 404) {
                console.log(`Issue #${issueNumber} does not exist - skipping`);
              } else {
                console.error(`Error processing issue #${issueNumber}:`, error.message);
              }
            }
          }